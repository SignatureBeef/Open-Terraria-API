<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<OutputType>WinExe</OutputType>
		<TargetFramework>net6.0</TargetFramework>
		<Platforms>x64</Platforms>
		<Nullable>enable</Nullable>
		<DebugType>embedded</DebugType>
		<RunPostBuildEvent>Always</RunPostBuildEvent>
	</PropertyGroup>
	<ItemGroup>
		<AvaloniaXaml Remove="Properties\**" />
		<Compile Remove="Properties\**" />
		<EmbeddedResource Remove="Properties\**" />
		<None Remove="Properties\**" />
	</ItemGroup>
	<ItemGroup>
		<Compile Remove="csharp\plugins\modules\otapi\otapi-runtime\HostGame.cs" />
		<Compile Remove="csharp\plugins\modules\otapi\otapi-runtime\HostGamePlugin.cs" />
		<Compile Remove="csharp\plugins\modules\otapi\otapi-runtime\ImGuiRenderer.cs" />
		<Compile Remove="csharp\plugins\scripts\otapi\cef-runtime.cs" />
		<Compile Remove="csharp\plugins\scripts\otapi\test-runtime.cs" />
	</ItemGroup>
	<ItemGroup>
		<None Include="csharp\plugins\modules\otapi\otapi-runtime\HostGamePlugin.cs" />
		<None Include="csharp\plugins\modules\otapi\otapi-runtime\ImGuiRenderer.cs" />
		<None Include="csharp\plugins\modules\otapi\otapi-runtime\HostGame.cs" />
		<None Include="csharp\plugins\scripts\otapi\cef-runtime.cs" />
		<None Include="csharp\plugins\scripts\otapi\test-runtime.cs" />
	</ItemGroup>
	<ItemGroup>
		<PackageReference Include="Avalonia" Version="11.0.6" />
		<PackageReference Include="Avalonia.Desktop" Version="0.10.18" />
		<PackageReference Include="Avalonia.Diagnostics" Version="11.0.6" />
		<PackageReference Include="CefGlue.Avalonia" Version="91.4472.30" />
		<PackageReference Include="CefGlue.Common" Version="91.4472.30" />
		<PackageReference Include="Material.Avalonia" Version="2.5.1" />
		<PackageReference Include="Projektanker.Icons.Avalonia.FontAwesome" Version="5.5.0" />
		<PackageReference Include="ReactiveUI" Version="18.3.1" />
		<PackageReference Include="System.Reactive.Linq" Version="5.0.0" />
		<PackageReference Include="Microsoft.Win32.Registry" Version="6.0.0-preview.5.21301.5" GeneratePathProperty="true" />
	</ItemGroup>
	<ItemGroup>
		<ProjectReference Include="..\FNA\FNA.Core.csproj">
			<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
		</ProjectReference>
		<ProjectReference Include="..\OTAPI.Common\OTAPI.Common.csproj" />
		<ProjectReference Include="..\OTAPI.Patcher\OTAPI.Patcher.csproj">
			<ExcludeFromSingleFile>true</ExcludeFromSingleFile>
		</ProjectReference>
	</ItemGroup>
	<ItemGroup>
		<PackageReference Include="ImGui.NET" Version="1.87.3" GeneratePathProperty="true" />
		<PackageReference Include="ModFramework.Modules.ClearScript" Version="1.1.7" GeneratePathProperty="true" />
		<PackageReference Include="ModFramework.Modules.CSharp" Version="1.1.7" GeneratePathProperty="true" />
		<PackageReference Include="ModFramework.Modules.Lua" Version="1.1.7" GeneratePathProperty="true" />
		<PackageReference Include="MonoMod.RuntimeDetour.HookGen" Version="22.5.1.1" />
		<PackageReference Include="SharpZipLib" Version="1.4.0" />
		<PackageReference Include="System.Collections.Specialized" Version="4.3.0" />
		<PackageReference Include="System.Drawing.Primitives" Version="4.3.0" />
	</ItemGroup>
	<Target Name="CleanAll" AfterTargets="Clean">
		<RemoveDir Directories="$(OUTDIR)" />
	</Target>
	<ItemGroup>
		<Refs Include="$(MSBuildProjectDirectory)\..\OTAPI.Scripts\*.refs" />
		<Patches Include="$(MSBuildProjectDirectory)\..\OTAPI.Scripts\Patches\**\*.cs" />
		<TopLevelScripts Include="$(MSBuildProjectDirectory)\..\OTAPI.Scripts\Mods\**\*.cs" />
		<Shims Include="$(MSBuildProjectDirectory)\..\OTAPI.Scripts\Shims\**\*.cs" />
		<Modules Include="$(MSBuildProjectDirectory)\..\OTAPI.Scripts\Modules\**\*" />
		<JavaScript Include="$(MSBuildProjectDirectory)\..\OTAPI.Scripts\JavaScript\**\*.js" />
		<Lua Include="$(MSBuildProjectDirectory)\..\OTAPI.Scripts\Lua\**\*.lua" />
		<ClientRefs Include="$(MSBuildProjectDirectory)\csharp\plugins\*.refs" />
		<ClientModules Include="$(MSBuildProjectDirectory)\csharp\plugins\modules\**\*.cs" />
		<ClientCSScripts Include="$(MSBuildProjectDirectory)\csharp\plugins\scripts\**\*.cs" />
		<ClientJavascript Include="$(MSBuildProjectDirectory)\clearscript\**\*.js" />
		<ClientLua Include="$(MSBuildProjectDirectory)\lua\**\*.lua" />
	</ItemGroup>
	<ItemGroup>
		<Compile Update="MessageBoxWindow.axaml.cs">
			<DependentUpon>MessageBoxWindow.axaml</DependentUpon>
		</Compile>
	</ItemGroup>
	<Target Name="PostBuild" AfterTargets="AfterBuild;PostBuildEvent">
		<Message Text="Copying OTAPI patch files" Importance="high" />
		<MakeDir Directories="$(TargetDir)modifications/" />
		<RemoveDir Directories="$(TargetDir)modifications/" />
		<MakeDir Directories="$(TargetDir)modifications/" />
		<Copy SourceFiles="$(TargetDir)ModFramework.Modules.CSharp.dll" DestinationFolder="$(TargetDir)modifications" SkipUnchangedFiles="false" />
		<Copy SourceFiles="$(TargetDir)ModFramework.Modules.ClearScript.dll" DestinationFolder="$(TargetDir)modifications" SkipUnchangedFiles="false" />
		<Copy SourceFiles="$(TargetDir)ModFramework.Modules.Lua.dll" DestinationFolder="$(TargetDir)modifications" SkipUnchangedFiles="false" />

		<MakeDir Directories="$(TargetDir)patchtime/" />
		<RemoveDir Directories="$(TargetDir)patchtime/" />
		<MakeDir Directories="$(TargetDir)patchtime/" />

		<MakeDir Directories="$(TargetDir)csharp/" />
		<RemoveDir Directories="$(TargetDir)csharp/" />
		<MakeDir Directories="$(TargetDir)csharp/" />

		<MakeDir Directories="$(TargetDir)patchtime/csharp/" />
		<Copy SourceFiles="@(Refs)" DestinationFolder="$(TargetDir)patchtime/csharp/plugins/" />
		<Copy SourceFiles="@(Patches)" DestinationFolder="$(TargetDir)patchtime/csharp/plugins/patches/terraria/%(RecursiveDir)" />
		<Copy SourceFiles="@(TopLevelScripts)" DestinationFolder="$(TargetDir)patchtime/csharp/plugins/mods/terraria/%(RecursiveDir)" />
		<Copy SourceFiles="@(Shims)" DestinationFolder="$(TargetDir)patchtime/csharp/plugins/shims/terraria/%(RecursiveDir)" />
		<Copy SourceFiles="@(Modules)" DestinationFolder="$(TargetDir)patchtime/csharp/plugins/modules-patched/otapi/%(RecursiveDir)" />

		<MakeDir Directories="$(TargetDir)csharp/" />
		<Copy SourceFiles="@(ClientModules)" DestinationFolder="$(TargetDir)csharp/plugins/modules/%(RecursiveDir)" />
		<Copy SourceFiles="@(ClientRefs)" DestinationFolder="$(TargetDir)csharp/plugins/" />
		<Copy SourceFiles="@(ClientCSScripts)" DestinationFolder="$(TargetDir)csharp/plugins/scripts/%(RecursiveDir)" />

		<MakeDir Directories="$(TargetDir)clearscript/" />
		<RemoveDir Directories="$(TargetDir)clearscript/" />
		<MakeDir Directories="$(TargetDir)clearscript/" />
		<Copy SourceFiles="@(JavaScript)" DestinationFolder="$(TargetDir)clearscript/%(RecursiveDir)" />
		<Copy SourceFiles="@(ClientJavascript)" DestinationFolder="$(TargetDir)clearscript/%(RecursiveDir)" />

		<MakeDir Directories="$(TargetDir)lua/" />
		<RemoveDir Directories="$(TargetDir)lua/" />
		<MakeDir Directories="$(TargetDir)lua/" />
		<Copy SourceFiles="@(Lua)" DestinationFolder="$(TargetDir)lua/%(RecursiveDir)" />
		<Copy SourceFiles="@(ClientLua)" DestinationFolder="$(TargetDir)lua/%(RecursiveDir)" />

		<Copy SourceFiles="$(PkgMicrosoft_Win32_Registry)/lib/netstandard2.0/Microsoft.Win32.Registry.dll" DestinationFolder="$(TargetDir)" SkipUnchangedFiles="false" />
		<Copy SourceFiles="$(PkgImGui_NET)/runtimes/osx-universal/native/libcimgui.dylib" DestinationFolder="$(TargetDir)" SkipUnchangedFiles="false" />
	</Target>
	<Target Name="AfterPrepareForPublish" AfterTargets="Publish">
		<Message Text="Copying release OTAPI patch files" Importance="high" />
		<MakeDir Directories="$(PublishDir)modifications" />
		<RemoveDir Directories="$(PublishDir)modifications" />
		<MakeDir Directories="$(PublishDir)modifications" />
		<Copy SourceFiles="$(PkgModFramework_Modules_CSharp)/lib/$(TargetFramework)/ModFramework.Modules.CSharp.dll" DestinationFolder="$(PublishDir)modifications" SkipUnchangedFiles="false" />
		<Copy SourceFiles="$(PkgModFramework_Modules_ClearScript)/lib/$(TargetFramework)/ModFramework.Modules.ClearScript.dll" DestinationFolder="$(PublishDir)modifications" SkipUnchangedFiles="false" />
		<Copy SourceFiles="$(PkgModFramework_Modules_Lua)/lib/$(TargetFramework)/ModFramework.Modules.Lua.dll" DestinationFolder="$(PublishDir)modifications" SkipUnchangedFiles="false" />
		<Copy SourceFiles="$(PkgImGui_NET)/runtimes/osx-universal/native/libcimgui.dylib" DestinationFolder="$(PublishDir)" SkipUnchangedFiles="false" />

		<MakeDir Directories="$(PublishDir)patchtime/" />
		<RemoveDir Directories="$(PublishDir)patchtime/" />
		<MakeDir Directories="$(PublishDir)patchtime/" />

		<MakeDir Directories="$(PublishDir)csharp" />
		<RemoveDir Directories="$(PublishDir)csharp" />
		<MakeDir Directories="$(PublishDir)csharp" />

		<MakeDir Directories="$(PublishDir)patchtime/csharp/" />
		<Copy SourceFiles="@(Refs)" DestinationFolder="$(PublishDir)patchtime/csharp/plugins/" />
		<Copy SourceFiles="@(Patches)" DestinationFolder="$(PublishDir)patchtime/csharp/plugins/patches/terraria/%(RecursiveDir)" />
		<Copy SourceFiles="@(TopLevelScripts)" DestinationFolder="$(PublishDir)patchtime/csharp/plugins/mods/terraria/%(RecursiveDir)" />
		<Copy SourceFiles="@(Shims)" DestinationFolder="$(PublishDir)patchtime/csharp/plugins/shims/terraria/%(RecursiveDir)" />
		<Copy SourceFiles="@(Modules)" DestinationFolder="$(PublishDir)patchtime/csharp/plugins/modules-patched/otapi/%(RecursiveDir)" />

		<MakeDir Directories="$(PublishDir)csharp/" />
		<Copy SourceFiles="@(ClientModules)" DestinationFolder="$(PublishDir)csharp/plugins/modules/%(RecursiveDir)" />
		<Copy SourceFiles="@(ClientRefs)" DestinationFolder="$(PublishDir)csharp/plugins/" />
		<Copy SourceFiles="@(ClientCSScripts)" DestinationFolder="$(PublishDir)csharp/plugins/scripts/%(RecursiveDir)" />

		<MakeDir Directories="$(PublishDir)clearscript/" />
		<RemoveDir Directories="$(PublishDir)clearscript/" />
		<MakeDir Directories="$(PublishDir)clearscript/" />
		<Copy SourceFiles="@(JavaScript)" DestinationFolder="$(PublishDir)clearscript/%(RecursiveDir)" />
		<Copy SourceFiles="@(ClientJavascript)" DestinationFolder="$(PublishDir)clearscript/%(RecursiveDir)" />

		<MakeDir Directories="$(PublishDir)lua/" />
		<RemoveDir Directories="$(PublishDir)lua/" />
		<MakeDir Directories="$(PublishDir)lua/" />
		<Copy SourceFiles="@(Lua)" DestinationFolder="$(PublishDir)lua/%(RecursiveDir)" />
		<Copy SourceFiles="@(ClientLua)" DestinationFolder="$(PublishDir)lua/%(RecursiveDir)" />
	</Target>

	<Import Condition="Exists('../OTAPI.Patcher/bin/Debug/$(TargetFramework)/AutoGenerated.target')" Project="../OTAPI.Patcher/bin/Debug/$(TargetFramework)/AutoGenerated.target" />
	<Import Condition="Exists('./bin/x64/Debug/$(TargetFramework)/AutoGenerated.target')" Project="./bin/x64/Debug/$(TargetFramework)/AutoGenerated.target" />

	<Target Name="MoveBin" AfterTargets="Publish">
		<ItemGroup>
			<MoveBinaries Include="$(PublishDir)*" Exclude="$(PublishDir)OTAPI.Client.Launcher.exe;$(PublishDir)client/*;$(PublishDir)steam_appid.txt" />
		</ItemGroup>
		<Move SourceFiles="@(MoveBinaries)" DestinationFolder="$(PublishDir)bin" ContinueOnError="true" />
		<RemoveDir Directories="$(PublishDir)cs;$(PublishDir)de;$(PublishDir)es;$(PublishDir)fr;$(PublishDir)it;$(PublishDir)ja;$(PublishDir)ko;$(PublishDir)pl;$(PublishDir)pt-BR;$(PublishDir)ru;$(PublishDir)swiftshader;$(PublishDir)tr;$(PublishDir)zh-Hans;$(PublishDir)zh-Hant" />
	</Target>

	<UsingTask TaskName="PatchAppHost" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)/Microsoft.Build.Tasks.Core.dll">
		<ParameterGroup>
			<HostExe ParameterType="System.String" Required="true" />
		</ParameterGroup>
		<Task>
			<Code Type="Fragment" Language="cs">
				/*
				This is a patch to allow self contained apps to run from the root while having the modules in a ./bin folder.
				https://github.com/dotnet/sdk/issues/10366

				The script replaces the ./OTAPI.Client.Launcher.dll with ./bin/OTAPI.Client.Launcher.dll
				alternates: dnSpy(does this method), NetCoreBeauty
				*/
				var find = Encoding.UTF8.GetBytes("OTAPI.Client.Launcher.dll\0");
				var replace = Encoding.UTF8.GetBytes("bin" + Path.DirectorySeparatorChar + "OTAPI.Client.Launcher.dll\0");
				var contents = File.ReadAllBytes(HostExe);

				var matches = 0;
				var offset = Array.FindIndex(contents, (b) =&gt; {
				matches = (b == find[matches]) ? matches + 1 : 0;
				return matches == find.Length;
				});
				if (offset &gt; -1) offset -= find.Length - 1;

				var x = 0;
				Array.ForEach(replace, _ =&gt; { contents[offset + x] = replace[x++]; });

				File.WriteAllBytes(HostExe, contents);
			</Code>
		</Task>
	</UsingTask>

	<Target Name="PatchAppHostAfterPublish" AfterTargets="Publish" Condition="'$(RuntimeIdentifier)' == 'win-x64'">
		<PatchAppHost HostExe="$(PublishDir)OTAPI.Client.Launcher.exe" />
		<Message Text="Patched OTAPI.Client.Launcher.exe host for ./bin redirect" Importance="High" />
	</Target>
	<Target Name="CreateScriptAfterPublish" AfterTargets="Publish" Condition="'$(RuntimeIdentifier)' != 'win-x64'">
		<Copy SourceFiles="$(ProjectDir)OTAPI.sh" DestinationFolder="$(PublishDir)" />
        <Exec Command="chmod +x $(PublishDir)OTAPI.sh" />
        <Message Text="Run the launcher with: cd bin/$(Configuration)/$(TargetFramework)/$(RuntimeIdentifier)/publish &amp;&amp; ./OTAPI.sh" Importance="High" />
	</Target>
</Project>
